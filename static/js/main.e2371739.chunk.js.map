{"version":3,"sources":["commons/i18n/index.js","commons/i18n/locales/en-us/index.js","commons/i18n/locales/pt-br/index.js","commons/styles/global.js","routes/home.js","routes/index.js","components/Loading/styled.js","components/Loading/index.jsx","containers/Main/styled.js","containers/Main/index.jsx","commons/constants/theme.js","App.js","serviceWorker.js","index.js"],"names":["resources","en-US","translation","general","pt-BR","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","process","interpolation","escapeValue","globalStyle","createGlobalStyle","_templateObject","route","path","main","lazy","__webpack_require__","e","then","bind","exact","routes","Object","toConsumableArray","Home","LoadingStyled","styled","div","styled_templateObject","Loading","react_default","a","createElement","ContainerStyled","Main_styled_templateObject","_ref","theme","primary","Main","Main_styled","react","fallback","components_Loading","react_router","map","key","component","App","styled_components_browser_esm","global","react_router_dom","containers_Main","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","src_App","document","getElementById","URL","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2371739.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport {\n  enUS,\n  ptBR\n} from './locales'\n\nconst resources = {\n  'en-US': {\n    translation: enUS\n  },\n  'pt-BR': {\n    translation: ptBR\n  }\n}\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources,\n    fallbackLng: 'pt-BR',\n    debug: process.env.NODE_ENV === 'development',\n    interpolation: {\n      escapeValue: false\n    }\n  })\n\nexport default i18n\n","import general from './general'\n\nexport default {\n  general\n}\n","import general from './general'\n\nexport default {\n  general\n}\n","import { createGlobalStyle } from 'styled-components'\n\nconst globalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n  }\n`\n\nexport default globalStyle\n","import { lazy } from 'react'\n\nconst Home = lazy(() => import('../containers/Home'))\n\nconst route = [\n  {\n    path: '/',\n    main: Home,\n    exact: true\n  }\n]\n\nexport default route\n","import Home from './home'\n\nconst routes = [\n  ...Home\n]\n\nexport default routes\n","import styled from 'styled-components'\n\nconst LoadingStyled = styled.div`\n  color: #777;\n`\n\nexport default LoadingStyled\n\n","import React from 'react';\nimport LoadingStyled from './styled';\n\nconst Loading = () => <LoadingStyled>Loading...</LoadingStyled>;\n\nexport default Loading;\n","import styled from 'styled-components'\n\nconst ContainerStyled = styled.div`\n  color: ${({ theme }) => theme.primary};\n`\n\nexport default ContainerStyled\n","import React, { Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport routes from '../../routes';\nimport Loading from '../../components/Loading';\nimport ContainerStyled from './styled';\n\nconst Main = () => (\n  <ContainerStyled>\n    <Suspense fallback={<Loading />}>\n      <Switch>\n        {routes.map(route => (\n          <Route\n            key={route.path}\n            path={route.path}\n            exact={route.exact}\n            component={route.main}\n          />\n        ))}\n      </Switch>\n    </Suspense>\n  </ContainerStyled>\n);\n\nexport default Main;\n","const theme = {\n  primary: '#330BB1'\n}\n\nexport default theme\n","import React, { Fragment } from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ThemeProvider } from 'styled-components'\nimport './commons/i18n'\nimport GlobalStyle from './commons/styles/global'\nimport Main from './containers/Main'\nimport theme from './commons/constants/theme'\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <Fragment>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Main />\n      </BrowserRouter>\n    </Fragment>\n  </ThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nrender(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}